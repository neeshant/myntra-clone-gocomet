{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\react-ecommerce-frontend-master\\\\react-ecommerce-frontend-master\\\\src\\\\context.js\";\nimport React, { Component } from 'react';\nimport { storeProducts, detailProduct } from './data'; //1.47\n\nconst ProductContext = React.createContext(); //Provider\n//Consumer\n//bireysel not:\n//productcontext.provider icinde kullanmak icin yedek\n//                products: this.state.products,\n//                detailProduct: this.state.detailProduct\n\n/*\none of point of views:\n            <ProductContext.Provider value = {{\n                    ...this.state,\n                    handleDetail: this.handleDetail,\n                    addToCart: this.addToCart,\n            }}>\n                {this.props.children}\n            </ProductContext.Provider>\n*/\n\nclass ProductProvider extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      products: [],\n      detailProduct: detailProduct,\n      cart: [],\n      modalOpen: false,\n      modalProduct: detailProduct,\n      cartSubTotal: 0,\n      cartTax: 0,\n      cartTotal: 0 //5.10\n      //for working on cart page we need to not leave the cart array as empty.\n      //cart: [],    so it is gonna be like below for temporarily.\n\n    };\n\n    this.setProducts = () => {\n      let tempProducts = [];\n      storeProducts.forEach(item => {\n        const singleItem = { ...item\n        };\n        tempProducts = [...tempProducts, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products: tempProducts\n        };\n      });\n    };\n\n    this.getItem = id => {\n      //3.17.35  item is symbolic and native \n      const product = this.state.products.find(item => item.id === id);\n      return product;\n    };\n\n    this.handleDetail = id => {\n      //3.23... solution for typeError i which caused because of not giving id parameter to getItem() method.\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          detailProduct: product\n        };\n      });\n    };\n\n    this.addToCart = id => {\n      //Before everything, to check the method's way logically\n      // console.log(`hello from add to cart id is ${id}`); \n      //I dont wanna to manupulate the state directly out of the setState method\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getItem(id));\n      const product = tempProducts[index];\n      product.inCart = true;\n      product.count = 1;\n      const price = product.price;\n      product.total = price;\n      this.setState(() => {\n        return {\n          products: tempProducts,\n          cart: [...this.state.cart, product]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.openModal = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          modalProduct: product,\n          modalOpen: true\n        };\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState(() => {\n        return {\n          modalOpen: false\n        };\n      });\n    };\n\n    this.increment = id => {\n      //Always start basic to a component that  makes sure it  being displayed in the screen primarily. \n      //console.log('this is increment method');\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.id === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.count = product.count + 1;\n      product.total = product.count * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        }; //5.34\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.decrement = id => {\n      //Always start basic to a component that  makes sure it  being displayed in the screen primarily. \n      //console.log('this is decrement method');\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.id === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.count = product.count - 1;\n\n      if (product.count === 0) {\n        this.removeItem(id);\n      } else {\n        product.total = product.count * product.price;\n        this.setState(() => {\n          return {\n            cart: [...tempCart]\n          };\n        }, () => {\n          this.addTotals(); //5.41\n        });\n      }\n    };\n\n    this.removeItem = id => {\n      //5.28 highly important piece below\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.id !== id);\n      const index = tempProducts.indexOf(this.getItem(id));\n      let removedProduct = tempProducts[index];\n      removedProduct.inCart = false;\n      removedProduct.count = 0;\n      removedProduct.total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          products: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.clearCart = () => {\n      //console.log('cart was cleared');\n      this.setState(() => {\n        //just like down it is really simple\n        return {\n          cart: []\n        };\n      }, () => {\n        this.setProducts();\n        this.addTotals();\n      });\n    };\n\n    this.addTotals = () => {\n      let subTotal = 0;\n      this.state.cart.map(item => subTotal += item.total); //5.12 item => (subTotal += itemTotal) or down syntax chose and care\n      //5.12 item => {subTotal += itemTotal} \n\n      const tempTax = subTotal * 0.1; // tempTax = subTotal * TaxRate;\n\n      const tax = parseFloat(tempTax.toFixed(2)); //toFixed means how many decimals should be shown\n      //The parseFloat() function parses a string and returns a floating point number.\n\n      const total = subTotal + tax;\n      this.setState(() => {\n        return {\n          cartSubTotal: subTotal,\n          cartTax: tax,\n          cartTotal: total\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setProducts();\n  }\n\n  /*TEST\n  //To test \n  tester= () => {\n     console.log('Store products :', storeProducts[0].inCart);\n      const tempProducts = [...this.state.products];\n     tempProducts[0].inCart = true;\n     this.setState(() => {\n         return {product: tempProducts},\n         () => {\n             console.log('State products :', this.state.product[0].inCart);\n             console.log('Store products :', storeProducts[0].inCart);\n         }\n         \n     });\n  \n  }\n  */\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        handleDetail: this.handleDetail,\n        addToCart: this.addToCart,\n        openModal: this.openModal,\n        closeModal: this.closeModal,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["C:/Users/admin/Desktop/react-ecommerce-frontend-master/react-ecommerce-frontend-master/src/context.js"],"names":["React","Component","storeProducts","detailProduct","ProductContext","createContext","ProductProvider","state","products","cart","modalOpen","modalProduct","cartSubTotal","cartTax","cartTotal","setProducts","tempProducts","forEach","item","singleItem","setState","getItem","id","product","find","handleDetail","addToCart","index","indexOf","inCart","count","price","total","addTotals","openModal","closeModal","increment","tempCart","selectedProduct","decrement","removeItem","filter","removedProduct","clearCart","subTotal","map","tempTax","tax","parseFloat","toFixed","componentDidMount","render","props","children","ProductConsumer","Consumer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,aAAR,EAAuBC,aAAvB,QAA2C,QAA3C,C,CACA;;AAEA,MAAMC,cAAc,GAAGJ,KAAK,CAACK,aAAN,EAAvB,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,eAAN,SAA8BL,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACrCM,KADqC,GAC7B;AACPC,MAAAA,QAAQ,EAAE,EADH;AAEPL,MAAAA,aAAa,EAAEA,aAFR;AAGPM,MAAAA,IAAI,EAAE,EAHC;AAIPC,MAAAA,SAAS,EAAE,KAJJ;AAKPC,MAAAA,YAAY,EAAER,aALP;AAMPS,MAAAA,YAAY,EAAE,CANP;AAOPC,MAAAA,OAAO,EAAE,CAPF;AAQPC,MAAAA,SAAS,EAAE,CARJ,CASP;AACA;AACA;;AAXO,KAD6B;;AAAA,SAoBrCC,WApBqC,GAoBvB,MAAM;AAChB,UAAIC,YAAY,GAAG,EAAnB;AACAd,MAAAA,aAAa,CAACe,OAAd,CAAsBC,IAAI,IAAI;AAC1B,cAAMC,UAAU,GAAG,EAAC,GAAGD;AAAJ,SAAnB;AACAF,QAAAA,YAAY,GAAG,CAAC,GAAGA,YAAJ,EAAkBG,UAAlB,CAAf;AAGH,OALD;AAMH,WAAKC,QAAL,CAAc,MAAI;AACd,eAAO;AAACZ,UAAAA,QAAQ,EAAEQ;AAAX,SAAP;AACH,OAFD;AAGA,KA/BoC;;AAAA,SAiCrCK,OAjCqC,GAiC1BC,EAAD,IAAO;AACb;AACA,YAAMC,OAAO,GAAG,KAAKhB,KAAL,CAAWC,QAAX,CAAoBgB,IAApB,CAAyBN,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYA,EAA7C,CAAhB;AACA,aAAOC,OAAP;AAEH,KAtCoC;;AAAA,SAwCrCE,YAxCqC,GAwCrBH,EAAD,IAAQ;AACnB;AACA,YAAMC,OAAO,GAAG,KAAKF,OAAL,CAAaC,EAAb,CAAhB;AACA,WAAKF,QAAL,CACI,MAAI;AACA,eAAO;AAACjB,UAAAA,aAAa,EAAEoB;AAAhB,SAAP;AACH,OAHL;AAKF,KAhDmC;;AAAA,SAiDrCG,SAjDqC,GAiDxBJ,EAAD,IAAQ;AAChB;AACA;AAEH;AACG,UAAIN,YAAY,GAAG,CAAC,GAAG,KAAKT,KAAL,CAAWC,QAAf,CAAnB;AACA,YAAMmB,KAAK,GAAGX,YAAY,CAACY,OAAb,CAAqB,KAAKP,OAAL,CAAaC,EAAb,CAArB,CAAd;AACA,YAAMC,OAAO,GAAGP,YAAY,CAACW,KAAD,CAA5B;AACAJ,MAAAA,OAAO,CAACM,MAAR,GAAiB,IAAjB;AACAN,MAAAA,OAAO,CAACO,KAAR,GAAgB,CAAhB;AACA,YAAMC,KAAK,GAAGR,OAAO,CAACQ,KAAtB;AACAR,MAAAA,OAAO,CAACS,KAAR,GAAgBD,KAAhB;AACA,WAAKX,QAAL,CAAc,MAAM;AAChB,eAAO;AAACZ,UAAAA,QAAQ,EAAEQ,YAAX;AAAyBP,UAAAA,IAAI,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,IAAf,EAAqBc,OAArB;AAA/B,SAAP;AACH,OAFD,EAEE,MAAI;AACF,aAAKU,SAAL;AAEH,OALD;AAOF,KApEmC;;AAAA,SAqEpCC,SArEoC,GAqExBZ,EAAE,IAAG;AACb,YAAMC,OAAO,GAAG,KAAKF,OAAL,CAAaC,EAAb,CAAhB;AACA,WAAKF,QAAL,CAAc,MAAI;AACd,eAAO;AACHT,UAAAA,YAAY,EAAEY,OADX;AAEHb,UAAAA,SAAS,EAAE;AAFR,SAAP;AAKH,OAND;AAOH,KA9EmC;;AAAA,SA+EpCyB,UA/EoC,GA+EvB,MAAM;AACf,WAAKf,QAAL,CAAc,MAAI;AACd,eAAO;AAACV,UAAAA,SAAS,EAAE;AAAZ,SAAP;AACH,OAFD;AAGH,KAnFmC;;AAAA,SAoFpC0B,SApFoC,GAoFvBd,EAAD,IAAQ;AAChB;AACA;AAEA,UAAIe,QAAQ,GAAG,CAAC,GAAG,KAAK9B,KAAL,CAAWE,IAAf,CAAf;AACA,YAAM6B,eAAe,GAAID,QAAQ,CAACb,IAAT,CAAcN,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYA,EAAlC,CAAzB;AACA,YAAMK,KAAK,GAAEU,QAAQ,CAACT,OAAT,CAAiBU,eAAjB,CAAb;AACA,YAAMf,OAAO,GAAGc,QAAQ,CAACV,KAAD,CAAxB;AAEAJ,MAAAA,OAAO,CAACO,KAAR,GAAgBP,OAAO,CAACO,KAAR,GAAgB,CAAhC;AACAP,MAAAA,OAAO,CAACS,KAAR,GAAgBT,OAAO,CAACO,KAAR,GAAgBP,OAAO,CAACQ,KAAxC;AAEA,WAAKX,QAAL,CAAc,MAAI;AACd,eAAO;AAACX,UAAAA,IAAI,EAAE,CAAC,GAAG4B,QAAJ;AAAP,SAAP,CADc,CAEd;AACH,OAHD,EAGG,MAAI;AACH,aAAKJ,SAAL;AACH,OALD;AAMH,KAtGmC;;AAAA,SAuGpCM,SAvGoC,GAuGvBjB,EAAD,IAAQ;AAChB;AACA;AAEA,UAAIe,QAAQ,GAAG,CAAC,GAAG,KAAK9B,KAAL,CAAWE,IAAf,CAAf;AACA,YAAM6B,eAAe,GAAGD,QAAQ,CAACb,IAAT,CAAcN,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYA,EAAlC,CAAxB;AACA,YAAMK,KAAK,GAAGU,QAAQ,CAACT,OAAT,CAAiBU,eAAjB,CAAd;AACA,YAAMf,OAAO,GAAGc,QAAQ,CAACV,KAAD,CAAxB;AAEAJ,MAAAA,OAAO,CAACO,KAAR,GAAgBP,OAAO,CAACO,KAAR,GAAgB,CAAhC;;AAEA,UAAGP,OAAO,CAACO,KAAR,KAAkB,CAArB,EAAuB;AACnB,aAAKU,UAAL,CAAgBlB,EAAhB;AACH,OAFD,MAEK;AACDC,QAAAA,OAAO,CAACS,KAAR,GAAgBT,OAAO,CAACO,KAAR,GAAgBP,OAAO,CAACQ,KAAxC;AAEA,aAAKX,QAAL,CAAc,MAAI;AACd,iBAAO;AAACX,YAAAA,IAAI,EAAE,CAAC,GAAG4B,QAAJ;AAAP,WAAP;AACH,SAFD,EAEE,MAAI;AACF,eAAKJ,SAAL,GADE,CAEF;AACH,SALD;AAOH;AACJ,KA/HmC;;AAAA,SAgIpCO,UAhIoC,GAgItBlB,EAAD,IAAQ;AACjB;AACA,UAAIN,YAAY,GAAG,CAAC,GAAG,KAAKT,KAAL,CAAWC,QAAf,CAAnB;AACA,UAAI6B,QAAQ,GAAG,CAAC,GAAG,KAAK9B,KAAL,CAAWE,IAAf,CAAf;AACA4B,MAAAA,QAAQ,GAAGA,QAAQ,CAACI,MAAT,CAAgBvB,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYA,EAApC,CAAX;AACA,YAAMK,KAAK,GAAGX,YAAY,CAACY,OAAb,CAAqB,KAAKP,OAAL,CAAaC,EAAb,CAArB,CAAd;AACA,UAAIoB,cAAc,GAAG1B,YAAY,CAACW,KAAD,CAAjC;AACAe,MAAAA,cAAc,CAACb,MAAf,GAAwB,KAAxB;AACAa,MAAAA,cAAc,CAACZ,KAAf,GAAuB,CAAvB;AACAY,MAAAA,cAAc,CAACV,KAAf,GAAuB,CAAvB;AAGA,WAAKZ,QAAL,CAAc,MAAI;AACd,eAAO;AACHX,UAAAA,IAAI,EAAE,CAAC,GAAG4B,QAAJ,CADH;AAEH7B,UAAAA,QAAQ,EAAE,CAAC,GAAGQ,YAAJ;AAFP,SAAP;AAIH,OALD,EAKG,MAAI;AACH,aAAKiB,SAAL;AACH,OAPD;AAQH,KApJmC;;AAAA,SAqJpCU,SArJoC,GAqJxB,MAAM;AACd;AAEA,WAAKvB,QAAL,CAAc,MAAI;AACd;AACA,eAAO;AAACX,UAAAA,IAAI,EAAE;AAAP,SAAP;AACH,OAHD,EAGE,MAAI;AACF,aAAKM,WAAL;AACA,aAAKkB,SAAL;AAEH,OAPD;AASH,KAjKmC;;AAAA,SAkKpCA,SAlKoC,GAkKzB,MAAI;AACX,UAAIW,QAAQ,GAAG,CAAf;AACA,WAAKrC,KAAL,CAAWE,IAAX,CAAgBoC,GAAhB,CAAoB3B,IAAI,IAAK0B,QAAQ,IAAI1B,IAAI,CAACc,KAA9C,EAFW,CAGX;AACA;;AACA,YAAMc,OAAO,GAAGF,QAAQ,GAAG,GAA3B,CALW,CAMX;;AACA,YAAMG,GAAG,GAAGC,UAAU,CAACF,OAAO,CAACG,OAAR,CAAgB,CAAhB,CAAD,CAAtB,CAPW,CAQX;AACA;;AACA,YAAMjB,KAAK,GAAGY,QAAQ,GAAGG,GAAzB;AACA,WAAK3B,QAAL,CAAc,MAAI;AACd,eAAQ;AACJR,UAAAA,YAAY,EAAEgC,QADV;AAEJ/B,UAAAA,OAAO,EAAEkC,GAFL;AAGJjC,UAAAA,SAAS,EAAEkB;AAHP,SAAR;AAOH,OARD;AAWH,KAxLmC;AAAA;;AAerCkB,EAAAA,iBAAiB,GAAE;AAClB,SAAKnC,WAAL;AAGA;;AAwKH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIIoC,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,MAAA,KAAK,EAAI,EAC1B,GAAG,KAAK5C,KADkB;AAE1BkB,QAAAA,YAAY,EAAE,KAAKA,YAFO;AAG1BC,QAAAA,SAAS,EAAE,KAAKA,SAHU;AAI1BQ,QAAAA,SAAS,EAAE,KAAKA,SAJU;AAK1BC,QAAAA,UAAU,EAAE,KAAKA,UALS;AAM1BC,QAAAA,SAAS,EAAE,KAAKA,SANU;AAO1BG,QAAAA,SAAS,EAAE,KAAKA,SAPU;AAQ1BC,QAAAA,UAAU,EAAE,KAAKA,UARS;AAS1BG,QAAAA,SAAS,EAAE,KAAKA;AATU,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAkBK,KAAKS,KAAL,CAAWC,QAlBhB,CADJ;AAsBH;;AAtOmC;;AAwOxC,MAAMC,eAAe,GAAGlD,cAAc,CAACmD,QAAvC;AAEA,SAAQjD,eAAR,EAAyBgD,eAAzB","sourcesContent":["import React, { Component } from 'react';\nimport {storeProducts, detailProduct} from './data';\n//1.47\n\nconst ProductContext = React.createContext();\n//Provider\n//Consumer\n//bireysel not:\n//productcontext.provider icinde kullanmak icin yedek\n//                products: this.state.products,\n//                detailProduct: this.state.detailProduct\n/*\none of point of views:\n            <ProductContext.Provider value = {{\n                    ...this.state,\n                    handleDetail: this.handleDetail,\n                    addToCart: this.addToCart,\n            }}>\n                {this.props.children}\n            </ProductContext.Provider>\n*/\n\n\nclass ProductProvider extends Component {\n   state = {\n    products: [],\n    detailProduct: detailProduct,\n    cart: [],\n    modalOpen: false,\n    modalProduct: detailProduct,\n    cartSubTotal: 0,\n    cartTax: 0,\n    cartTotal: 0,\n    //5.10\n    //for working on cart page we need to not leave the cart array as empty.\n    //cart: [],    so it is gonna be like below for temporarily.\n\n   };\n   componentDidMount(){\n    this.setProducts();\n\n\n   }\n   setProducts = () => {\n       let tempProducts = [];\n       storeProducts.forEach(item => {\n           const singleItem = {...item} ;\n           tempProducts = [...tempProducts, singleItem];\n\n\n       });\n    this.setState(()=>{\n        return {products: tempProducts}\n    });\n   }\n\n   getItem = (id) =>{\n       //3.17.35  item is symbolic and native \n       const product = this.state.products.find(item => item.id === id);\n       return product;\n\n   }\n\n   handleDetail = (id) => { \n       //3.23... solution for typeError i which caused because of not giving id parameter to getItem() method.\n       const product = this.getItem(id);\n       this.setState(\n           ()=>{\n               return {detailProduct: product}\n           }\n       );\n    }\n   addToCart = (id) => {\n       //Before everything, to check the method's way logically\n       // console.log(`hello from add to cart id is ${id}`); \n\n    //I dont wanna to manupulate the state directly out of the setState method\n       let tempProducts = [...this.state.products];\n       const index = tempProducts.indexOf(this.getItem(id));\n       const product = tempProducts[index];\n       product.inCart = true;\n       product.count = 1;\n       const price = product.price;\n       product.total = price;\n       this.setState(() => {\n           return {products: tempProducts, cart: [...this.state.cart, product] }\n       },()=>{\n           this.addTotals()\n\n       });\n\n    }\n    openModal = id =>{\n        const product = this.getItem(id);\n        this.setState(()=>{\n            return {\n                modalProduct: product,\n                modalOpen: true,\n\n            }\n        });\n    }\n    closeModal = () => {\n        this.setState(()=>{\n            return {modalOpen: false}\n        });\n    }\n    increment = (id) => {\n        //Always start basic to a component that  makes sure it  being displayed in the screen primarily. \n        //console.log('this is increment method');\n\n        let tempCart = [...this.state.cart];\n        const selectedProduct =  tempCart.find(item => item.id === id);\n        const index= tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n\n        product.count = product.count + 1;\n        product.total = product.count * product.price;\n\n        this.setState(()=>{\n            return {cart: [...tempCart]}\n            //5.34\n        }, ()=>{\n            this.addTotals();\n        });\n    }\n    decrement = (id) => {\n        //Always start basic to a component that  makes sure it  being displayed in the screen primarily. \n        //console.log('this is decrement method');\n\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.id === id);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n\n        product.count = product.count - 1;\n\n        if(product.count === 0){\n            this.removeItem(id)\n        }else{\n            product.total = product.count * product.price;\n\n            this.setState(()=>{\n                return {cart: [...tempCart]};\n            },()=>{\n                this.addTotals();\n                //5.41\n            }\n            );\n        }\n    }\n    removeItem = (id) => {\n        //5.28 highly important piece below\n        let tempProducts = [...this.state.products];\n        let tempCart = [...this.state.cart];\n        tempCart = tempCart.filter(item => item.id !== id);\n        const index = tempProducts.indexOf(this.getItem(id));\n        let removedProduct = tempProducts[index];\n        removedProduct.inCart = false;\n        removedProduct.count = 0;\n        removedProduct.total = 0;\n\n\n        this.setState(()=>{\n            return {\n                cart: [...tempCart],\n                products: [...tempProducts]\n            }\n        }, ()=>{\n            this.addTotals();\n        });\n    }\n    clearCart = () => {\n        //console.log('cart was cleared');\n\n        this.setState(()=>{\n            //just like down it is really simple\n            return {cart: []}\n        },()=>{\n            this.setProducts();\n            this.addTotals();\n\n        }\n        );\n    }\n    addTotals =()=>{\n        let subTotal = 0;\n        this.state.cart.map(item => (subTotal += item.total));\n        //5.12 item => (subTotal += itemTotal) or down syntax chose and care\n        //5.12 item => {subTotal += itemTotal} \n        const tempTax = subTotal * 0.1;\n        // tempTax = subTotal * TaxRate;\n        const tax = parseFloat(tempTax.toFixed(2));\n        //toFixed means how many decimals should be shown\n        //The parseFloat() function parses a string and returns a floating point number.\n        const total = subTotal + tax;\n        this.setState(()=>{\n            return ({\n                cartSubTotal: subTotal,\n                cartTax: tax,\n                cartTotal: total,\n\n\n            });\n        });\n\n\n    }\n\n\n /*TEST\n //To test \ntester= () => {\n    console.log('Store products :', storeProducts[0].inCart);\n\n    const tempProducts = [...this.state.products];\n    tempProducts[0].inCart = true;\n    this.setState(() => {\n        return {product: tempProducts},\n        () => {\n            console.log('State products :', this.state.product[0].inCart);\n            console.log('Store products :', storeProducts[0].inCart);\n        }\n        \n    });\n\n\n}\n*/ \n\n    render() {\n        return (\n            <ProductContext.Provider value = {{\n                    ...this.state,\n                    handleDetail: this.handleDetail,\n                    addToCart: this.addToCart,\n                    openModal: this.openModal,\n                    closeModal: this.closeModal,\n                    increment: this.increment,\n                    decrement: this.decrement,\n                    removeItem: this.removeItem,\n                    clearCart: this.clearCart\n\n            }}>\n            \n          {/*}  <button onClick = {this.tester}> Test Me!\n            {//2.40.00 da kaldı\n            }\n            </button>\n        */}\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }\n}\nconst ProductConsumer = ProductContext.Consumer;\n\nexport {ProductProvider, ProductConsumer};\n"]},"metadata":{},"sourceType":"module"}