{"ast":null,"code":"var _this = this;\n\nimport React, { Fragment, useCallback, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Image from './components/Image';\nimport ZoomImage from './components/ZoomImage';\nimport FullscreenPortal from './components/FullscreenPortal';\n\nvar InnerImageZoom = function InnerImageZoom(_ref) {\n  var _ref$moveType = _ref.moveType,\n      moveType = _ref$moveType === void 0 ? 'pan' : _ref$moveType,\n      _ref$zoomType = _ref.zoomType,\n      zoomType = _ref$zoomType === void 0 ? 'click' : _ref$zoomType,\n      src = _ref.src,\n      srcSet = _ref.srcSet,\n      sizes = _ref.sizes,\n      sources = _ref.sources,\n      width = _ref.width,\n      height = _ref.height,\n      hasSpacer = _ref.hasSpacer,\n      zoomSrc = _ref.zoomSrc,\n      _ref$zoomScale = _ref.zoomScale,\n      zoomScale = _ref$zoomScale === void 0 ? 1 : _ref$zoomScale,\n      zoomPreload = _ref.zoomPreload,\n      alt = _ref.alt,\n      title = _ref.title,\n      _ref$fadeDuration = _ref.fadeDuration,\n      fadeDuration = _ref$fadeDuration === void 0 ? 150 : _ref$fadeDuration,\n      fullscreenOnMobile = _ref.fullscreenOnMobile,\n      _ref$mobileBreakpoint = _ref.mobileBreakpoint,\n      mobileBreakpoint = _ref$mobileBreakpoint === void 0 ? 640 : _ref$mobileBreakpoint,\n      hideCloseButton = _ref.hideCloseButton,\n      hideHint = _ref.hideHint,\n      className = _ref.className,\n      afterZoomIn = _ref.afterZoomIn,\n      afterZoomOut = _ref.afterZoomOut;\n  var img = useRef(null);\n  var zoomImg = useRef(null);\n  var imgProps = useRef({});\n\n  var _useState = useState(zoomPreload),\n      isActive = _useState[0],\n      setIsActive = _useState[1];\n\n  var _useState2 = useState(false),\n      isTouch = _useState2[0],\n      setIsTouch = _useState2[1];\n\n  var _useState3 = useState(false),\n      isZoomed = _useState3[0],\n      setIsZoomed = _useState3[1];\n\n  var _useState4 = useState(false),\n      isFullscreen = _useState4[0],\n      setIsFullscreen = _useState4[1];\n\n  var _useState5 = useState(false),\n      isDragging = _useState5[0],\n      setIsDragging = _useState5[1];\n\n  var _useState6 = useState(false),\n      isValidDrag = _useState6[0],\n      setIsValidDrag = _useState6[1];\n\n  var _useState7 = useState(moveType),\n      currentMoveType = _useState7[0],\n      setCurrentMoveType = _useState7[1];\n\n  var _useState8 = useState(0),\n      left = _useState8[0],\n      setLeft = _useState8[1];\n\n  var _useState9 = useState(0),\n      top = _useState9[0],\n      setTop = _useState9[1];\n\n  var handleMouseEnter = function handleMouseEnter(e) {\n    setIsActive(true);\n    zoomType === 'hover' && !isZoomed && handleClick(e);\n  };\n\n  var handleTouchStart = function handleTouchStart() {\n    setIsTouch(true);\n    setIsFullscreen(getFullscreenStatus(fullscreenOnMobile, mobileBreakpoint));\n    setCurrentMoveType('drag');\n  };\n\n  var handleClick = function handleClick(e) {\n    if (isZoomed) {\n      if (isTouch) {\n        hideCloseButton && handleClose();\n      } else {\n        !isValidDrag && zoomOut();\n      }\n\n      return;\n    }\n\n    isTouch && setIsActive(true);\n\n    if (zoomImg.current) {\n      handleLoad({\n        target: zoomImg.current\n      });\n      zoomIn(e.pageX, e.pageY);\n    } else {\n      imgProps.current.onLoadCallback = zoomIn.bind(_this, e.pageX, e.pageY);\n    }\n  };\n\n  var handleLoad = function handleLoad(e) {\n    var scaledDimensions = getScaledDimensions(e.target, zoomScale);\n    zoomImg.current = e.target;\n    zoomImg.current.setAttribute('width', scaledDimensions.width);\n    zoomImg.current.setAttribute('height', scaledDimensions.height);\n    imgProps.current.scaledDimensions = scaledDimensions;\n    imgProps.current.bounds = getBounds(img.current, false);\n    imgProps.current.ratios = getRatios(imgProps.current.bounds, scaledDimensions);\n\n    if (imgProps.current.onLoadCallback) {\n      imgProps.current.onLoadCallback();\n      imgProps.current.onLoadCallback = null;\n    }\n  };\n\n  var handleMouseMove = function handleMouseMove(e) {\n    var left = e.pageX - imgProps.current.offsets.x;\n    var top = e.pageY - imgProps.current.offsets.y;\n    left = Math.max(Math.min(left, imgProps.current.bounds.width), 0);\n    top = Math.max(Math.min(top, imgProps.current.bounds.height), 0);\n    setLeft(left * -imgProps.current.ratios.x);\n    setTop(top * -imgProps.current.ratios.y);\n  };\n\n  var handleDragStart = function handleDragStart(e) {\n    imgProps.current.offsets = getOffsets(e.pageX || e.changedTouches[0].pageX, e.pageY || e.changedTouches[0].pageY, zoomImg.current.offsetLeft, zoomImg.current.offsetTop);\n    setIsDragging(true);\n\n    if (!isTouch) {\n      imgProps.current.eventPosition = {\n        x: e.pageX,\n        y: e.pageY\n      };\n    }\n  };\n\n  var handleDragMove = useCallback(function (e) {\n    var left = (e.pageX || e.changedTouches[0].pageX) - imgProps.current.offsets.x;\n    var top = (e.pageY || e.changedTouches[0].pageY) - imgProps.current.offsets.y;\n    left = Math.max(Math.min(left, 0), (imgProps.current.scaledDimensions.width - imgProps.current.bounds.width) * -1);\n    top = Math.max(Math.min(top, 0), (imgProps.current.scaledDimensions.height - imgProps.current.bounds.height) * -1);\n    setLeft(left);\n    setTop(top);\n  }, []);\n\n  var handleDragEnd = function handleDragEnd(e) {\n    setIsDragging(false);\n\n    if (!isTouch) {\n      var moveX = Math.abs(e.pageX - imgProps.current.eventPosition.x);\n      var moveY = Math.abs(e.pageY - imgProps.current.eventPosition.y);\n      setIsValidDrag(moveX > 5 || moveY > 5);\n    }\n  };\n\n  var handleMouseLeave = function handleMouseLeave(e) {\n    currentMoveType === 'drag' && isZoomed ? handleDragEnd(e) : handleClose();\n  };\n\n  var handleClose = function handleClose() {\n    zoomOut(function () {\n      setTimeout(function () {\n        if (zoomPreload && isTouch || !zoomPreload) {\n          zoomImg.current = null;\n          imgProps.current = getDefaults();\n          setIsActive(false);\n        }\n\n        setIsTouch(false);\n        setIsFullscreen(false);\n        setCurrentMoveType(moveType);\n      }, isFullscreen ? 0 : fadeDuration);\n    });\n  };\n\n  var initialMove = function initialMove(pageX, pageY) {\n    imgProps.current.offsets = getOffsets(window.pageXOffset, window.pageYOffset, -imgProps.current.bounds.left, -imgProps.current.bounds.top);\n    handleMouseMove({\n      pageX: pageX,\n      pageY: pageY\n    });\n  };\n\n  var initialDrag = function initialDrag(pageX, pageY) {\n    var initialPageX = (pageX - (window.pageXOffset + imgProps.current.bounds.left)) * -imgProps.current.ratios.x;\n    var initialPageY = (pageY - (window.pageYOffset + imgProps.current.bounds.top)) * -imgProps.current.ratios.y;\n    initialPageX = initialPageX + (isFullscreen ? (window.innerWidth - imgProps.current.bounds.width) / 2 : 0);\n    initialPageY = initialPageY + (isFullscreen ? (window.innerHeight - imgProps.current.bounds.height) / 2 : 0);\n    imgProps.current.bounds = getBounds(img.current, isFullscreen);\n    imgProps.current.offsets = getOffsets(0, 0, 0, 0);\n    handleDragMove({\n      changedTouches: [{\n        pageX: initialPageX,\n        pageY: initialPageY\n      }],\n      preventDefault: function preventDefault() {},\n      stopPropagation: function stopPropagation() {}\n    });\n  };\n\n  var zoomIn = function zoomIn(pageX, pageY) {\n    setIsZoomed(true);\n    currentMoveType === 'drag' ? initialDrag(pageX, pageY) : initialMove(pageX, pageY);\n    afterZoomIn && afterZoomIn();\n  };\n\n  var zoomOut = function zoomOut(callback) {\n    setIsZoomed(false);\n    afterZoomOut && afterZoomOut();\n    callback && callback();\n  };\n\n  var getDefaults = function getDefaults() {\n    return {\n      onLoadCallback: null,\n      bounds: {},\n      offsets: {},\n      ratios: {},\n      eventPosition: {},\n      scaledDimensions: {}\n    };\n  };\n\n  var getBounds = function getBounds(img, isFullscreen) {\n    if (isFullscreen) {\n      return {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        left: 0,\n        top: 0\n      };\n    }\n\n    return img.getBoundingClientRect();\n  };\n\n  var getOffsets = function getOffsets(pageX, pageY, left, top) {\n    return {\n      x: pageX - left,\n      y: pageY - top\n    };\n  };\n\n  var getRatios = function getRatios(bounds, dimensions) {\n    return {\n      x: (dimensions.width - bounds.width) / bounds.width,\n      y: (dimensions.height - bounds.height) / bounds.height\n    };\n  };\n\n  var getFullscreenStatus = function getFullscreenStatus(fullscreenOnMobile, mobileBreakpoint) {\n    return fullscreenOnMobile && window.matchMedia && window.matchMedia(\"(max-width: \" + mobileBreakpoint + \"px)\").matches;\n  };\n\n  var getScaledDimensions = function getScaledDimensions(zoomImg, zoomScale) {\n    return {\n      width: zoomImg.naturalWidth * zoomScale,\n      height: zoomImg.naturalHeight * zoomScale\n    };\n  };\n\n  var zoomImageProps = {\n    src: zoomSrc || src,\n    fadeDuration: isFullscreen ? 0 : fadeDuration,\n    top: top,\n    left: left,\n    isZoomed: isZoomed,\n    onLoad: handleLoad,\n    onDragStart: currentMoveType === 'drag' ? handleDragStart : null,\n    onDragEnd: currentMoveType === 'drag' ? handleDragEnd : null,\n    onClose: !hideCloseButton && isTouch ? handleClose : null\n  };\n  useEffect(function () {\n    imgProps.current = getDefaults();\n  }, []);\n  useEffect(function () {\n    getFullscreenStatus(fullscreenOnMobile, mobileBreakpoint) && setIsActive(false);\n  }, [fullscreenOnMobile, mobileBreakpoint]);\n  useEffect(function () {\n    if (!zoomImg.current) {\n      return;\n    }\n\n    var eventType = isTouch ? 'touchmove' : 'mousemove';\n\n    if (isDragging) {\n      zoomImg.current.addEventListener(eventType, handleDragMove, {\n        passive: true\n      });\n    } else {\n      zoomImg.current.removeEventListener(eventType, handleDragMove);\n    }\n  }, [isDragging, isTouch, handleDragMove]);\n  return /*#__PURE__*/React.createElement(\"figure\", {\n    className: \"iiz \" + (currentMoveType === 'drag' ? 'iiz--drag' : '') + \" \" + (className ? className : ''),\n    style: {\n      width: width\n    },\n    ref: img,\n    onTouchStart: isZoomed ? null : handleTouchStart,\n    onClick: handleClick,\n    onMouseEnter: isTouch ? null : handleMouseEnter,\n    onMouseMove: currentMoveType === 'drag' || !isZoomed ? null : handleMouseMove,\n    onMouseLeave: isTouch ? null : handleMouseLeave\n  }, /*#__PURE__*/React.createElement(Image, {\n    src: src,\n    srcSet: srcSet,\n    sizes: sizes,\n    sources: sources,\n    width: width,\n    height: height,\n    hasSpacer: hasSpacer,\n    alt: alt,\n    title: title,\n    fadeDuration: fadeDuration,\n    isZoomed: isZoomed\n  }), isActive && /*#__PURE__*/React.createElement(Fragment, null, isFullscreen ? /*#__PURE__*/React.createElement(FullscreenPortal, null, /*#__PURE__*/React.createElement(ZoomImage, zoomImageProps)) : /*#__PURE__*/React.createElement(ZoomImage, zoomImageProps)), !hideHint && !isZoomed && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"iiz__btn iiz__hint\"\n  }));\n};\n\nInnerImageZoom.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  moveType: PropTypes.string,\n  zoomType: PropTypes.string,\n  src: PropTypes.string.isRequired,\n  srcSet: PropTypes.string,\n  sizes: PropTypes.string,\n  sources: PropTypes.array,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  hasSpacer: PropTypes.bool,\n  zoomSrc: PropTypes.string,\n  zoomScale: PropTypes.number,\n  zoomPreload: PropTypes.bool,\n  alt: PropTypes.string,\n  title: PropTypes.string,\n  fadeDuration: PropTypes.number,\n  fullscreenOnMobile: PropTypes.bool,\n  mobileBreakpoint: PropTypes.number,\n  hideCloseButton: PropTypes.bool,\n  hideHint: PropTypes.bool,\n  className: PropTypes.string,\n  afterZoomIn: PropTypes.func,\n  afterZoomOut: PropTypes.func\n} : {};\nexport default InnerImageZoom;","map":null,"metadata":{},"sourceType":"module"}